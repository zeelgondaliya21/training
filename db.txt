create table patient(
	patient_id varchar(15) primary key,
	firstName varchar(20) not null,
	lastName varchar(20) not null,
	middleName varchar(20),
	dob date not null,
	gender_id varchar(10) not null,
	race_id varchar(10) not null,
);



create table chart(
	patient_id varchar(15) not null,
	chart_id serial primary key,
	chart_no numeric not null,
	chart_number text generated always as (((chart_id::text || chart_no::text))) stored,
	constraint fk_chart
    	foreign key (patient_id) 
	  		references patient(patient_id)
);


create table gender(
	gender_id varchar(10) primary key,
	patient_id varchar(15) not null,
	sex varchar(10) check(sex in ('Male','Female','Unknown')),
	constraint fk_gender
    	foreign key (patient_id) 
	  		references patient(patient_id)
);



create table racePatient(
	race_id  varchar(10) primary key,
	patient_id varchar(15) not null,
	race varchar(10) check(race in ('Asian','American','African')),
	constraint fk_race
    	foreign key(patient_id) 
	  		references patient(patient_id)
);



create table address(
	patient_id varchar(15) not null,
	address_id varchar(10) primary key,
	street varchar(15) not null,
	city varchar(15) not null,
	state varchar(15) not null,
	country varchar(15) not null,
	zip  numeric(8) not null,
	address_type numeric(5) not null,
	primary_address_status boolean default false,
	constraint fk_address
    	foreign key(patient_id) 
	  		references patient(patient_id)
);



create table address_type(
	address_type_id varchar(10) primary key,
	address_id varchar(5),
	address_type_desc varchar(10) not null,
	constraint fk_address_id
    	foreign key(address_id) 
	  		references address(address_id)
);



create table address_type(
	address_type_id varchar(10) primary key,
	address_id varchar(5),
	address_type_desc varchar(10) not null,
	constraint fk_address_id
    	foreign key(address_id) 
	  		references address(address_id)
);



create table fax(
	address_id varchar(5) not null,
	fax_id varchar(5) primary key,
	primary_fax_status boolean default false,
	constraint fk_fax
    	foreign key (address_id) 
	  		references address(address_id)
);



create table phone(
	phone_id numeric(5) primary key,
	address_id varchar(5) not null,
	phone_code numeric(5) not null,
	phone_number numeric(10) not null,
	constraint fk_phone
    	foreign key(address_id) 
	  		references address(address_id)
);



create table phone_type(
	phone_id numeric(5) not null,
	phone_type_id varchar(5) primary key,
	phone_type_desc varchar(10) not null,
	constraint fk_phone_type
    	foreign key(phone_id) 
	  		references phone(phone_id)
);



create table phone(
	phone_id numeric(5) primary key,
	address_id varchar(5) not null,
	phone_code numeric(5) not null,
	phone_number numeric(10) not null,
	primary_phone_status boolean default false,
	constraint fk_phone
    	foreign key(address_id) 
	  		references address(address_id)
);



create table phone_type(
	phone_id numeric(5) not null,
	phone_type_id varchar(5) primary key,
	phone_type_desc varchar(10) not null,
	constraint fk_phone_type
    	foreign key(phone_id) 
	  		references phone(phone_id)
);

CREATE TABLE preference_type(
	pref_type_id serial primary key,
	pref_type varchar(30) NOT NULL
);
drop table preference;


CREATE TABLE preference(
	pref_id serial primary key,
	pref_type_id serial,
	patient_id varchar(10),
	address_id varchar(10),
	phone_id numeric(5),
	fax_id varchar(10),
	constraint fk_address_id
    	foreign key(address_id) 
	  		references address(address_id),
	constraint fk_fax_id
    	foreign key(fax_id) 
	  		references fax(fax_id),
	constraint fk_patient_id
    	foreign key(patient_id) 
	  		references patient(patient_id),
	constraint fk_phone_id
    	foreign key(phone_id) 
	  		references phone(phone_id),
	constraint fk_pref_type_id
    	foreign key(pref_type_id) 
	  		references preference_type(pref_type_id)
);




insert into patient values (1,'channing','martin','b','02-10-2001');
insert into race_patient values (11,1,'American');
insert into gender values (12,1,'Male');
insert into chart (chart_id,patient_id,chart_no) values (13,1,101);
insert into address values (1,1,'heaven','surat','gujarat','india','395004',True);
insert into address_type values (1,1,'Home');
insert into phone values (14,1,91,9978901114,true);
insert into phone_type values (14,1,'Landline');
insert into fax values (1,3672,true);

insert into patient values (2,'zeel','gondaliya','b','01-10-2001');
insert into race_patient values (2,2,'Asian');
insert into gender values (17,2,'Male');
insert into chart (chart_id,patient_id,chart_no) values (18,2,101);
insert into address values (2,2,'hell','ahmedabad','gujarat','india','395004',True);
insert into address_type values (2,2,'Home');
insert into phone values (19,2,91,9978901167,true);
insert into phone_type values (19,2,'Landline');
insert into fax values (2,3435,true);

insert into patient values (3,'zeel','gondaliya','b','01-10-2001');
insert into race_patient values (3,3,'African');
insert into gender values (21,3,'Male');
insert into chart (chart_id,patient_id,chart_no) values (22,3,105);
insert into address values (3,3,'sola','rajkot','gujarat','india','395456',True);
insert into address_type values (3,3,'Home');
insert into phone values (23,3,91,9976781167,true);
insert into phone_type values (23,3,'Cell');
insert into fax values (3,3935,true);
update patient set lastname='musk' where patient_id = '3';
update patient set dob='03-04-1989' where patient_id = '3';


select * from gender;


insert into gender values ('1','1','Male');
insert into gender values ('1','1','Male');





--Assignment2
--1---
create view demographics as(
	select p.firstname,p.lastname,p.middlename,p.dob,g.sex,r.race,c.chart_number,a.street,a.city,a.state,a.country,a.zip,ph.phone_number ,f.fax_id 
	from patient p
	inner join gender g 
	on p.patient_id =g.patient_id 
	inner join race_patient r
	on p.patient_id =r.patient_id 
	inner join chart c 	
	on p.patient_id = c.patient_id 
	inner join
    address a on p.patient_id =a.patient_id 
	inner join phone as ph
	on p.patient_id  = a.patient_id 
	and a.address_id = ph.address_id 
	inner join fax  as f
	on p.patient_id  = a.patient_id 
	and a.address_id = f.address_id
);


select * from demographics;
select * from patient ;




--2---
select firstname, lastname, dob, sex, count((firstname)) as "Count" from demographics group by firstname,lastname, dob, sex;
select firstname, lastname, dob, sex, count((lastname)) as "Count" from demographics group by firstname,lastname, dob, sex;
select firstname, lastname, dob, sex, count((dob)) as "Count" from demographics group by firstname,lastname, dob, sex;
select firstname, lastname, dob, sex, count((sex)) as "Count" from demographics group by firstname,lastname, dob, sex;
select firstname, lastname, dob, sex, count(concat(firstname ,lastname,dob,sex)) from demographics group by firstname,lastname, dob, sex;




--5---
create view demographics2 as(
	select p.firstname,p.lastname,p.middlename,p.dob,p.patient_id,g.sex,g.gender_id,r.race,r.race_id ,c.chart_number,c.chart_id ,a.street,a.city,a.state,a.country,a.zip,a.address_id ,ph.phone_number,ph.phone_id ,f.fax_id
	from patient p
	inner join gender g 
	on p.patient_id = g.patient_id 
	inner join race_patient r
	on p.patient_id = r.patient_id 
	inner join chart c 	
	on p.patient_id = c.patient_id 
	inner join address a 
    on p.patient_id = a.patient_id 
	inner join phone ph 
	on p.patient_id  = a.patient_id 
	and a.address_id = ph.address_id 
	inner join fax f
	on p.patient_id  = a.patient_id 
	and a.address_id = f.address_id
);
select * from demographics2;

create or replace function get_patient_info(phonenumber varchar)
returns table (firstname varchar, middlename varchar, lastname varchar, dob date, sex varchar, race varchar, street varchar, city varchar, state varchar, country varchar, phone_number varchar, fax_id varchar)
language plpgsql
as
$$
declare
begin
	return query select d.firstname, d.middlename, d.lastname, d.dob, g.sex, r.race, a.street, a.city, a.state, a.country, ph.phone_number, f.fax_id
		from
		demographics2 d
		left join gender g 
		on d.patient_id= g.patient_id 
		left join race_patient r 
		on d.patient_id  = r.patient_id
		left join address a 
		on d.patient_id  = a.patient_id  
		left join phone ph 
		on d.patient_id = a.patient_id 
		and a.address_id = ph.address_id 
		left join fax f 
		on d.patient_id = a.patient_id
		and a.address_id = f.address_id 
		where ph.phone_number = phonenumber;
end;
$$;
drop function get_patient_info;

select get_patient_info('9978901114');




--3---
create or replace function insert_info(pid varchar(15), fn varchar(50), mn varchar(50), ln varchar(50), db date )
returns int
language plpgsql
as
$$
declare
	newpk integer;
begin 
	insert into patient(patient_id, firstname, middlename, lastname, dob) values(pid,fn, mn, ln, db);
	select patient_id into newpk from patient order by patient_id;
	return newpk;
end;
$$;
drop function insert_info;

select insert_info(4::varchar,'priyank'::varchar,'m'::varchar,'donda'::varchar,'10-2-2001'::date);
select * from patient;




--4--
create or replace function get_patient_info2(search varchar(50),page integer, size integer)
returns table (firstname varchar, middlename varchar, lastname varchar, dob date, sex varchar, race varchar, street varchar, city varchar, state varchar, country varchar, phone_number varchar, fax_id varchar)
language plpgsql
as
$$
declare
begin
	return query select d.firstname, d.middlename, d.lastname, d.dob, g.sex, r.race, a.street, a.city, a.state, a.country, ph.phone_number, f.fax_id
		from
		demographics2 d
		left join gender g 
		on d.patient_id = g.patient_id  
		left join race_patient r 
		on d.patient_id  = r.patient_id 
		left join address a 
		on d.patient_id  = a.patient_id  
		left join phone ph 
		on d.patient_id = a.patient_id 
		and a.address_id = ph.address_id 
		left join fax f 
		on d.patient_id = a.patient_id 
		and a.address_id  = f.address_id 
		where d.firstname = search 
		or d.lastname = search 
		or g.sex = search
		order by d.firstname,d.lastname,d.sex,d.dob
		limit size
		offset ((page-1)*size);
end;
$$;

select get_patient_info2('Male'::varchar,1,4);
select * from chart;
insert into chart (patient_id,chart_no) values(1,1);
insert into chart (patient_id,chart_no) values(1,4);
insert into chart (patient_id,chart_no) values(1,8);
insert into chart (patient_id,chart_no) values(1,1);

select * from patient;
insert into chart (race_id,patient_id,race) values(1,1);
insert into chart (race_id,patient_id,race) values(1,4);
insert into chart (race_id,patient_id,race) values(1,8);
insert into chart (race_id,patient_id,race) values(1,1);

select * from gender;
select * from address;
select * from address_type;
select * from fax;
select * from phone;
select * from phone_type;
select * from preference_type;
insert into preference values (1,1,1,1,14,36720);
insert into preference_type  values (1,'Primary');
insert into preference_type values (2,'Secondary');


insert into preference values(1,1)

delete from phone where phone_id=3; 

select * from demographics2;




CREATE OR REPLACE FUNCTION public.get_patient_data(id integer DEFAULT NULL::integer, fname character varying DEFAULT NULL::character varying, lname character varying DEFAULT NULL::character varying, gen character varying DEFAULT NULL::character varying, dob character varying DEFAULT NULL::character varying, pagenumber integer DEFAULT 1, pagesize integer DEFAULT 50)
 RETURNS TABLE(first_name character varying, middle_name character varying, last_name character varying, chart character varying, date_of_birth date, gender character varying)
 LANGUAGE plpgsql
AS $function$
declare 
		declare F integer := 0;
		declare Q varchar;
		declare dt date;
begin
	Q := 'select p.first_name, p.middle_name, p.last_name, p.chart, p.date_of_birth, g.sex_type  from patient as p left join gender as  g on  p.sex_id = g.sex_id ';
	
	if id > 0 then
		Q := Q || ' where p.patient_id  ='||id||' ';
		F := 1;
	end if;
	

	if fname <> '' then
		if F then
			Q := Q || ' and p.first_name = '''|| fname ||'''';
		else
			Q := Q || 'where p.first_name = '''|| fname ||'''';
			F := 1;
		end if;
	end if;


	if  lname <> '' then
		if F then
			Q := Q || ' and p.last_name = '''|| lname ||'''';
		else
			Q := Q || 'where p.last_name = '''|| lname ||'''';
			F := 1;
		end if;
	end if;

	if  gen <> '' then
		if F then
			Q := Q || ' and g.sex_type = '''|| gen ||'''';
		else
			Q := Q || 'where g.sex_type = '''|| gen ||'''';
			F := 1;
		end if;
	end if;

	if  dob <> '' then
		dt := TO_DATE(dob,'YYYY-MM-DD');
		if F then
			Q := Q || ' and p.date_of_birth = '''|| dt ||'''';
		else
			Q := Q || 'where p.date_of_birth = '''|| dt ||'''';
			F := 1;
		end if;
	end if;

	Q := Q || ' order by  p.patient_id, p.first_name, p.last_name, p.date_of_birth ';
	Q := Q || ' LIMIT '||PageSize||' OFFSET (('||PageNumber||'-1) * '||PageSize||');';
	return QUERY execute Q;
	
end;
$function$
;


--4.0 Create Function to get the result of patient’s data by using patientId, lastname, firstname, sex, dob. Need to implement the pagination and 
--sorting(LastName, Firstname, Sex, DOB) in this function.
create or replace function get_patient_data(pid int default null, fname varchar default null, lname varchar default null, fgender int default null, fdob date default null, pagenumber int default 1, pagesize int default 10)
returns table (firstname varchar, middlename varchar, lastname varchar, dob date, gender varchar)
language plpgsql
as
$$
declare
	query_var text := 'select pd.firstname, pd.middlename, pd.lastname, pd.dob, g.gender_value as gender
		from patient_demographics pd left join gender g on g.gender_id = pd.gender_id where 1=1 ';
	where_var text;
	order_var text := ' order by pd.firstname asc, pd.lastname asc, g.gender_value asc, pd.dob asc ';
	pagination_var text := 'limit '||pagesize||' offset (('||pagenumber-1||')*'||pagesize||');';
	final_query text;
begin
	if pid is null and fname is null and lname is null and fgender is null and fdob is null then 
		return query execute query_var||order_var||pagination_var;
	elsif pid is not null then
		where_var := 'and pd.patient_id='||pid;
		return query execute query_var||where_var||order_var||pagination_var;
	elsif fname is not null then
		where_var := 'and pd.firstname='||''''||fname||'''';
		return query execute query_var||where_var||order_var||pagination_var;
	elsif lname is not null then
		where_var := 'and pd.lastname='||''''||lname||'''';
		return query execute query_var||where_var||order_var||pagination_var;
	elsif fgender is not null then
		where_var := 'and g.gender_value='||''''||fgender||'''';
		return query execute query_var||where_var||order_var||pagination_var;
	elsif fdob is not null then
		where_var := 'and pd.dob='||''''||fdob||'''';
		return query execute query_var||where_var||order_var||pagination_var;
	end if;
end;
$$;

select * from get_patient_data();
select * from get_patient_data(pid => 1);
select * from get_patient_data(lname => 'shah');
select * from get_patient_data(pagenumber => 1, pagesize => 2);
